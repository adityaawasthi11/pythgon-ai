# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MBpzEtPlLRyQhzuB3lRxwh0wmfMIVfab
"""

from sklearn.datasets import load_digits
digits = load_digits()
print(digits.data.shape)

import matplotlib.pyplot as plt
plt.gray()
plt.matshow(digits.images[0])
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_digits.html

from sklearn import datasets
digits = datasets.load_digits()

dir(digits)

print (type(digits.images))
print (type(digits.target))

print(digits.images.shape)
plt.gray()
plt.matshow(digits.images[1])

print (digits.images[1234])

import matplotlib.pyplot as plt
plt.imshow(digits.images[1234],cmap='binary')
plt.show()

print (digits.target.shape)
print (digits.target)

def plot_multi(i):
 '''Plots 16 digits, starting with digit i'''
 nplots = 16
 fig = plt.figure(figsize=(15,15))
 for j in range(nplots):
   plt.subplot(4,4,j+1)
   plt.imshow(digits.images[i+j], cmap='binary')
   plt.title(digits.target[i+j])
   plt.axis('off')
   plt.show()

plot_multi(0)

y = digits.target
x = digits.images.reshape((len(digits.images), -1))
x.shape

x_train = x[:1000]
y_train = y[:1000]
x_test = x[1000:]
y_test = y[1000:]

from sklearn.neural_network import MLPClassifier
mlp = MLPClassifier(hidden_layer_sizes=(15,), activation='logistic', alpha=1e-4,
 solver='sgd', tol=1e-4, random_state=1,
 learning_rate_init=.1, verbose=True)

mlp.fit(x_train,y_train)

predictions = mlp.predict(x_test)
predictions[:797]

y_test[:797]

predictions[:797]-y_test[0:797]

from sklearn.metrics import accuracy_score
accuracy_score(y_test, predictions)
